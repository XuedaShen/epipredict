% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_test_data.R
\name{get_test_data}
\alias{get_test_data}
\title{Get test data for prediction based on longest lag period}
\usage{
get_test_data(
  recipe,
  x,
  fill_locf = FALSE,
  n_recent = NULL,
  forecast_date = max(x$time_value)
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{x}{A data frame, tibble, or epi_df data set.}

\item{fill_locf}{Logical. Should we use \code{locf} to fill in missing data?}

\item{n_recent}{Integer or NULL. If filling missing data with \code{locf=TRUE},
how far back are we willing to tolerate missing data? Larger values allow
more filling. The default \code{NULL} will determine this from the maximum
lags used in the \code{recipe}. For example, suppose n_recent = 3, then if the
3 most recent observations in some region are all \code{NA}’s, we won’t be able
to fill anything, and an error message will be thrown.}

\item{forecast_date}{Date. By default, this is set to the maximum
\code{time_value} in \code{x}. But if there is data latency such that recent \code{NA}'s
should be filled, this may be \emph{after} the last available \code{time_value}.}
}
\value{
A tibble with columns \code{geo_value}, \code{time_value}, any additional
keys, as well other variables in the original dataset.
}
\description{
Based on the longest lag period in the recipe,
\code{get_test_data()} creates an \link[epiprocess:epi_df]{epiprocess::epi_df}
with columns \code{geo_value}, \code{time_value}
and other variables in the original dataset,
which will be used to create test data.
}
\details{
It also optionally fills missing values
using the last-observation-carried-forward (LOCF) method. If this
is not possible (say because there would be only \code{NA}'s in some location),
it will produce an error suggesting alternative options to handle missing
values with more advanced techniques.
}
\examples{
# create recipe
rec <- epi_recipe(case_death_rate_subset) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_lag(case_rate, lag = c(0, 7, 14))
get_test_data(recipe = rec, x = case_death_rate_subset)
}
