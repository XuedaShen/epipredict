% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_residual_quantiles.R
\name{layer_residual_quantiles}
\alias{layer_residual_quantiles}
\title{Creates predictions based on residual quantiles}
\usage{
layer_residual_quantiles(
  frosting,
  ...,
  probs = c(0.0275, 0.975),
  symmetrize = TRUE,
  by_key = TRUE,
  name = ".pred_distn",
  .flag = TRUE,
  id = rand_id("residual_quantiles")
)
}
\arguments{
\item{frosting}{a \code{frosting} postprocessor}

\item{...}{Unused, include for consistency with other layers.}

\item{probs}{numeric vector of probabilities with values in (0,1)
referring to the desired quantile.}

\item{symmetrize}{logical. If \code{TRUE} then interval will be symmetric.}

\item{by_key}{logical. If \code{TRUE} then quantiles will be computed separately
for each combination of the keys.}

\item{name}{character. The name for the output column.}

\item{.flag}{a logical to determine if the layer is added. Passed on to
\code{add_layer()}. Default \code{TRUE}.}

\item{id}{a random id string}
}
\value{
an updated \code{frosting} postprocessor with additional columns of the
residual quantiles added to the prediction
}
\description{
Creates predictions based on residual quantiles
}
\examples{
jhu <- case_death_rate_subset \%>\%
  dplyr::filter(time_value > "2021-11-01", geo_value \%in\% c("ak", "ca", "ny"))

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_naomit()

wf <- epi_workflow(r, parsnip::linear_reg()) \%>\%
 parsnip::fit(jhu)

latest <- get_test_data(recipe = r, x = jhu)

f <- frosting() \%>\%
  layer_predict() \%>\%
  layer_residual_quantiles(probs = c(0.0275, 0.975), symmetrize = FALSE) \%>\%
  layer_naomit(.pred)
wf1 <- wf \%>\% add_frosting(f)

p <- predict(wf1, latest)
p
}
