% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frosting.R
\name{add_frosting}
\alias{add_frosting}
\alias{remove_frosting}
\alias{update_frosting}
\title{Add frosting to a workflow}
\usage{
add_frosting(x, frosting, ...)

remove_frosting(x)

update_frosting(x, frosting = NULL, layer_num = NULL, ...)
}
\arguments{
\item{x}{A workflow}

\item{frosting}{A frosting layer created using \code{frosting()}.
Optional for \code{update_epi_recipe()} only.}

\item{...}{Can only be used in \code{update_frosting()} to input a parameter
update.}

\item{layer_num}{the number of the layer to update in an \code{epi_workflow}.
Intended for use in \code{update_frosting()} only.}
}
\value{
\code{x}, updated with a new or removed frosting postprocessor
}
\description{
Add frosting to a workflow
}
\details{
The \code{update_frosting} function can either update the entire frosting
or a layer in an existing frosting in an \code{epi_workflow}. In the latter case,
the parameter name the new value it is equal to must be input into \code{...}.
See the examples below for brief illustrations of both types of updates.
}
\examples{
jhu <- case_death_rate_subset \%>\%
  filter(time_value > "2021-11-01", geo_value \%in\% c("ak", "ca", "ny"))
r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_naomit()

wf <- epi_workflow(r, parsnip::linear_reg()) \%>\% fit(jhu)
latest <- jhu \%>\%
  dplyr::filter(time_value >= max(time_value) - 14)

# Add frosting to a workflow and predict
f <- frosting() \%>\% layer_predict() \%>\% layer_naomit(.pred)
wf1 <- wf \%>\% add_frosting(f)
p1 <- predict(wf1, latest)
p1

# Update frosting in a workflow and predict
f2 <- frosting() \%>\% layer_predict()
wf2 <- wf1 \%>\% update_frosting(f2)
p2 <- predict(wf2, latest)
p2

# Remove frosting from the workflow and predict
wf3 <- wf2 \%>\% remove_frosting()
p2 <- predict(wf3, latest)
p2

# Additional feature in `update_frosting` is to change a layer
# in the frosting from the workflow
f3 <- frosting() \%>\% layer_predict() \%>\% layer_threshold(.pred)

wf3 = wf \%>\% add_frosting(f3)

# Update `layer_threshold` to have an upper bound of 1
wf3 = wf3 \%>\% update_frosting(layer_num = 2, upper = 1)
extract_frosting(wf3)

}
