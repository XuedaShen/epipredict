% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_recipe.R
\name{add_epi_recipe}
\alias{add_epi_recipe}
\alias{remove_epi_recipe}
\alias{update_epi_recipe}
\title{Add an \code{epi_recipe} to a workflow}
\usage{
add_epi_recipe(x, recipe, ..., blueprint = default_epi_recipe_blueprint())

remove_epi_recipe(x)

update_epi_recipe(
  x,
  recipe = NULL,
  step_num = NULL,
  ...,
  blueprint = default_epi_recipe_blueprint()
)
}
\arguments{
\item{x}{A workflow or epi_workflow}

\item{recipe}{A recipe created using \code{\link[recipes:recipe]{recipes::recipe()}}.
Optional for \code{update_epi_recipe()} only.}

\item{...}{Can only be used in \code{update_epi_recipe()} to input a parameter
update.}

\item{blueprint}{A hardhat blueprint used for fine tuning the preprocessing.

\code{\link[=default_epi_recipe_blueprint]{default_epi_recipe_blueprint()}} is used.

Note that preprocessing done here is separate from preprocessing that
might be done automatically by the underlying model.}

\item{step_num}{the number of the step to update.
Can only be used in \code{update_epi_recipe()} only.}
}
\value{
\code{x}, updated with a new recipe preprocessor.
}
\description{
Add an \code{epi_recipe} to a workflow
}
\details{
\code{add_epi_recipe} has the same behaviour as
\code{\link[workflows:add_recipe]{workflows::add_recipe()}} but sets a different
default blueprint to automatically handle \link[epiprocess:epi_df]{epiprocess::epi_df} data.

The \code{update_epi_recipe} function can either update the entire recipe or a
step in an existing recipe in an \code{epi_workflow}. In the latter case, the
parameter name that the new value it is equal to must be input into \code{...}.
See the examples below for brief illustrations of both types of updates.
}
\examples{
library(epiprocess)
library(dplyr)
library(recipes)

jhu <- case_death_rate_subset \%>\%
  filter(time_value > "2021-08-01") \%>\%
  dplyr::arrange(geo_value, time_value)

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_lag(case_rate, lag = c(0, 7, 14)) \%>\%
  step_naomit(all_predictors()) \%>\%
  step_naomit(all_outcomes(), skip = TRUE)

workflow <- epi_workflow() \%>\%
  add_epi_recipe(r)

workflow

r2 <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7)
workflow <- update_epi_recipe(workflow, r2)

workflow <- remove_epi_recipe(workflow)

workflow

# Additional feature in `update_epi_recipe` is to change a step
# in the recipe from the workflow
workflow <- epi_workflow() \%>\%
  add_epi_recipe(r)

# Update second step, `step_epi_ahead()`, to have an
# ahead value of 14 days
workflow = workflow \%>\% update_epi_recipe(step_num = 2, ahead = 14)
workflows::extract_preprocessor(workflow)

}
\seealso{
\code{\link[workflows:add_recipe]{workflows::add_recipe()}}
\itemize{
\item \code{add_recipe()} specifies the terms of the model and any preprocessing that
is required through the usage of a recipe.
\item \code{remove_recipe()} removes the recipe as well as any downstream objects
\item \code{update_recipe()} first removes the recipe, then replaces the previous
recipe with the new one.
}
}
