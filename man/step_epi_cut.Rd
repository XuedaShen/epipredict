% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_epi_cut.R
\name{step_epi_cut}
\alias{step_epi_cut}
\title{Cut a numeric variable into a factor}
\usage{
step_epi_cut(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  breaks,
  extend_range_to_inf = TRUE,
  include_outside_range = FALSE,
  collapse = FALSE,
  columns = NULL,
  skip = FALSE,
  id = rand_id("epi_cut")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{breaks}{A numeric vector with at least one cut point.}

\item{extend_range_to_inf}{Logical (or a vector of 2 logicals). Should the
breaks be extended to include the whole real line. Can be different, that
is passing \code{c(TRUE, FALSE)} will extend only the lower range to \code{-Inf} but
not the upper range.}

\item{include_outside_range}{Logical, indicating if values outside the
range in the train set should be included in the lowest or highest bucket.
Defaults to \code{FALSE}, values outside the original range will be set to \code{NA}.}

\item{collapse}{Logical. If the some buckets have no elements in the training
set, remove those buckets from the resulting factor. For example,
if \code{breaks = c(-Inf, 0, 2, Inf)} but the target feature has no values in
\link{0, 2}, then the result will be as if breaks had been \code{c(-Inf, 0, Inf)}.
The empty bucket will be combined with whichever neighbouring bucket has
fewer values. No warning will be issued. Default is FALSE.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_epi_cut()} creates a \emph{specification} of a recipe step that cuts a numeric
variable into a factor based on provided boundary values
}
\details{
This version is different from \code{\link[recipes:step_cut]{recipes::step_cut()}}. Typical usage here,
is to, at train time, add \verb{(-Inf, Inf)} as lower and upper limits to the
range so that only \emph{internal} breaks are necessary.
One could use \code{step_cut()} by adding these yourself, but for the moment,
that implementation doesn't handle \code{NA}'s in the variable, nor are the
\code{prep()} or \code{bake()} methods exported.

If \code{extend_range_to_inf} is FALSE, then unlike the \code{base::cut()}
function there is no need to specify the
min and the max values in the breaks. All values before the lowest break
point will end up in the first bucket, all values after the last break
points will end up in the last.

If \code{extend_range_to_inf} is TRUE, then there is no difference.

\code{step_cut()} will call \code{base::cut()} in the baking step with
\code{include.lowest} set to \code{TRUE}.
}
\examples{
df <- data.frame(x = 1:10, y = 5:14)
rec <- recipe(df)

# The min and max of the variable are used as boundaries
# if they exceed the breaks (when `extend_range_to_inf = FALSE`)
rec \%>\%
  step_epi_cut(x, breaks = 5, extend_range_to_inf  = FALSE) \%>\%
  prep() \%>\%
  bake(df)

rec \%>\%
  step_epi_cut(x, breaks = 5) \%>\%
  prep()
  bake(df)
}
