[{"path":"https://cmu-delphi.github.io/epipredict/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 epipredict authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel McDonald. Author, maintainer. Jacob Bien. Author. Ryan Tibshirani. Author. Logan Brooks. Author. Rachel Lobay. Contributor. Ken Mawer. Contributor. Chloe . Contributor. Quang Nguyen. Contributor. Dmitry Shemetov. Contributor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDonald D, Bien J, Tibshirani R, Brooks L (2022). epipredict: Basic epidemiology forecasting methods. https://github.com/cmu-delphi/epipredict/, https://cmu-delphi.github.io/epipredict.","code":"@Manual{,   title = {epipredict: Basic epidemiology forecasting methods},   author = {Daniel McDonald and Jacob Bien and Ryan Tibshirani and Logan Brooks},   year = {2022},   note = {https://github.com/cmu-delphi/epipredict/, https://cmu-delphi.github.io/epipredict}, }"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"epipredict","dir":"","previous_headings":"","what":"Basic epidemiology forecasting methods","title":"Basic epidemiology forecasting methods","text":"Note: package currently development likely work expected.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Basic epidemiology forecasting methods","text":"can install development version epipredict GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"cmu-delphi/epipredict\")"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Basic epidemiology forecasting methods","text":"can view documentation main branch https://cmu-delphi.github.io/epipredict.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"goals-for-epipredict","dir":"","previous_headings":"","what":"Goals for epipredict","title":"Basic epidemiology forecasting methods","text":"hope provide: Baseline flat-line forecaster Autoregressive forecaster Autoregressive classifier Preprocessor: things data model training Trainer: train model data, resulting fitted model object Predictor: make predictions, using fitted model object Postprocessor: things predictions returning Target audience: Basic. data, calls forecaster default arguments. Intermediate. Wants examine changes arguments, take advantage built flexibility. Advanced. Wants write forecasters. Maybe willing build components write. Advanced user find task relatively easy (’ll show ). Example: quiet period, user decides want first predict whether surge occur, say using variant information GISAID. surging locations, want train AR model using past surges location. Everywhere else, predict flat line. able lines code. Delphi’s forecasts produced/evaluated way now, code base scattered evolving. want consolidate, generalize, simplify allow others benefit well. basic framework allow something like following. feel familiar anyone working R+tidyverse. Simple linear autoregressive model scaling (modular) run epi_df one line. hypothetical example first classifying, fitting different models also fit framework. isn’t far current production models.","code":"my_fcaster = new_epi_predictor() %>%   add_preprocessor(scaler, var = cases, by = pop) %>%   add_preprocessor(lagger, var = dv_cli, lags = c(0, 7, 14)) %>%   add_trainer(lm) %>%   add_predictor(lm.predict) %>%   add_postprocessor(scaler, by = 1/pop) my_fcaster(lead(cases, 7) ~ ., epi_df, key_vars, time_vars)"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"why-doesnt-this-exist","dir":"","previous_headings":"Goals for epipredict","what":"Why doesn’t this exist","title":"Basic epidemiology forecasting methods","text":"Closest neighbor {fable}. want major downsides: Small modifications hard (e.g. can’t “just use” glmnet instead lm) AR model. “iterative” forecasting, bad epidemiology. Much better simple models use “direct” forecasting. epi tasks, dramatically -cover. Layering possible/natural Can’t use methods aren’t already implemented. forecasts can’t produced fable. However: developers behind fable wrote package called fabletools powers model creation (based R6). can almost certainly borrow technology lever .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"what-this-isnt","dir":"","previous_headings":"Goals for epipredict","what":"What this isn’t","title":"Basic epidemiology forecasting methods","text":"framework SIR models. intend create simple versions, advanced models—use variants, hospitalizations, different types immunity, age stratification, etc.—compartmentalized way (though see pypm). types models also better scenario modeling short term forecasts unless quite complicated.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an epi_recipe to a workflow — add_epi_recipe","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"Add epi_recipe workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"","code":"add_epi_recipe(x, recipe, ..., blueprint = default_epi_recipe_blueprint())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"x workflow epi_workflow recipe recipe created using recipes::recipe() ... used. blueprint hardhat blueprint used fine tuning preprocessing. default_epi_recipe_blueprint() used. Note preprocessing done separate preprocessing might done automatically underlying model.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"x, updated new recipe preprocessor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"behaviour workflows::add_recipe() sets different default blueprint automatically handle epiprocess::epi_df data.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_epi_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an epi_recipe to a workflow — add_epi_recipe","text":"","code":"library(epiprocess) #>  #> Attaching package: ‘epiprocess’ #> The following object is masked from ‘package:stats’: #>  #>     filter library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(recipes) #>  #> Attaching package: ‘recipes’ #> The following object is masked from ‘package:stats’: #>  #>     step  jhu <- case_death_rate_subset %>%   filter(time_value > \"2021-08-01\") %>%   dplyr::arrange(geo_value, time_value)  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE)  workflow <- epi_workflow() %>%   add_epi_recipe(r)  workflow #> ══ Epi Workflow ════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: None #> Postprocessor: None #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 5 Recipe Steps #>  #> • step_epi_lag() #> • step_epi_ahead() #> • step_epi_lag() #> • step_naomit() #> • step_naomit()"},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Add frosting to a workflow — add_frosting","title":"Add frosting to a workflow — add_frosting","text":"Add frosting workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add frosting to a workflow — add_frosting","text":"","code":"add_frosting(x, frosting, ...)  remove_frosting(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add frosting to a workflow — add_frosting","text":"x workflow frosting frosting layer created using frosting() ... used.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add frosting to a workflow — add_frosting","text":"x, updated new removed frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add frosting to a workflow — add_frosting","text":"","code":"library(dplyr) library(recipes)  jhu <- case_death_rate_subset %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE) wf <- epi_workflow(r, parsnip::linear_reg()) %>% parsnip::fit(jhu) latest <- jhu %>%   filter(time_value >= max(time_value) - 14)  # Add frosting to a workflow and predict f <- frosting() %>% layer_predict() %>% layer_naomit(.pred) wf1 <- wf %>% add_frosting(f) p1 <- predict(wf1, latest) p1 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 3 #>   geo_value time_value .pred #> * <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.313 #> 3 ny        2021-12-31 0.295  # Remove frosting from the workflow and predict wf2 <- wf1 %>% remove_frosting() p2 <- predict(wf2, latest) p2 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 108 × 3 #>    geo_value time_value .pred #>    <chr>     <date>     <dbl> #>  1 ak        2021-12-10    NA #>  2 ca        2021-12-10    NA #>  3 ny        2021-12-10    NA #>  4 ak        2021-12-11    NA #>  5 ca        2021-12-11    NA #>  6 ny        2021-12-11    NA #>  7 ak        2021-12-12    NA #>  8 ca        2021-12-12    NA #>  9 ny        2021-12-12    NA #> 10 ak        2021-12-13    NA #> # … with 98 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add layer to a frosting object — add_layer","title":"Add layer to a frosting object — add_layer","text":"Add layer frosting object","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add layer to a frosting object — add_layer","text":"","code":"add_layer(frosting, object, flag = TRUE)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add layer to a frosting object — add_layer","text":"frosting frosting postprocessor object frosting layer flag logical determine layer added. Default TRUE.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/add_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add layer to a frosting object — add_layer","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/apply_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply postprocessing to a fitted workflow — apply_frosting","title":"Apply postprocessing to a fitted workflow — apply_frosting","text":"function intended internal use. implements postprocessing inside predict() method fitted workflow.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/apply_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply postprocessing to a fitted workflow — apply_frosting","text":"","code":"apply_frosting(workflow, ...)  # S3 method for default apply_frosting(workflow, components, ...)  # S3 method for epi_workflow apply_frosting(workflow, components, the_fit, the_recipe, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/apply_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply postprocessing to a fitted workflow — apply_frosting","text":"workflow object class workflow ... additional arguments passed methods components list components containing model information. updated returned layer. mold - output calling hardhat::mold() workflow. contains information preprocessing, including recipe. forged - output calling hardhat::forge() workflow. predictors outcomes new_data. three components predictors, outcomes (new_data), extras (usually rest data, including keys). keys - put keys (time_value, geo_value, others) ease. the_fit fitted model object returned calling parsnip::fit() the_recipe epi_recipe preprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ARX forecaster argument constructor — arx_args_list","title":"ARX forecaster argument constructor — arx_args_list","text":"Constructs list arguments arx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARX forecaster argument constructor — arx_args_list","text":"","code":"arx_args_list(   lags = c(0, 7, 14),   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARX forecaster argument constructor — arx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARX forecaster argument constructor — arx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARX forecaster argument constructor — arx_args_list","text":"","code":"arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"AR forecaster with optional covariates — arx_forecaster","title":"AR forecaster with optional covariates — arx_forecaster","text":"AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AR forecaster with optional covariates — arx_forecaster","text":"","code":"arx_forecaster(x, y, key_vars, time_value, args = arx_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AR forecaster with optional covariates — arx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AR forecaster with optional covariates — arx_forecaster","text":"data frame point (optionally interval) forecasts single ahead (unique horizon) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign argument list to inside an environment — assign_arg_list","title":"Assign argument list to inside an environment — assign_arg_list","text":"function similar attach() without need detach. Calling beginning forecaster makes members arg_list available inside forecaster ugly args$member syntax.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign argument list to inside an environment — assign_arg_list","text":"","code":"assign_arg_list(l, env = parent.frame())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign argument list to inside an environment — assign_arg_list","text":"l List named arguments. env environment args assigned. default goes calling environment.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign argument list to inside an environment — assign_arg_list","text":"Nothing returned. Called side effects.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign argument list to inside an environment — assign_arg_list","text":"","code":"if (FALSE) {   rm(list = ls())   l <- list(a=1, b=c(12, 10), ff = function() -5)   assign_arg_list(l)   a }"},{"path":"https://cmu-delphi.github.io/epipredict/reference/augment.epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.epi_workflow","title":"Augment data with predictions — augment.epi_workflow","text":"Augment data predictions","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/augment.epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.epi_workflow","text":"","code":"# S3 method for epi_workflow augment(x, new_data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/augment.epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.epi_workflow","text":"x trained epi_workflow new_data epi_df predictors ... Arguments passed predict method.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/augment.epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.epi_workflow","text":"new_data additional columns containing predicted values","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/case_death_rate_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of JHU daily state cases and deaths — case_death_rate_subset","title":"Subset of JHU daily state cases and deaths — case_death_rate_subset","text":"data source confirmed COVID-19 cases deaths based reports made available Center Systems Science Engineering Johns Hopkins University. example data ranges Dec 31, 2020 Dec 31, 2021, includes states.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/case_death_rate_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset of JHU daily state cases and deaths — case_death_rate_subset","text":"","code":"case_death_rate_subset"},{"path":"https://cmu-delphi.github.io/epipredict/reference/case_death_rate_subset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of JHU daily state cases and deaths — case_death_rate_subset","text":"tibble 20,496 rows 4 variables: geo_value geographic value associated row measurements. time_value time value associated row measurements. case_rate 7-day average signal number new confirmed COVID-19 cases per 100,000 population, daily death_rate 7-day average signal number new confirmed deaths due COVID-19 per 100,000 population, daily","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/case_death_rate_subset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subset of JHU daily state cases and deaths — case_death_rate_subset","text":"object contains modified part COVID-19 Data Repository Center Systems Science Engineering (CSSE) Johns Hopkins University republished COVIDcast Epidata API. data set licensed terms Creative Commons Attribution 4.0 International license Johns Hopkins University behalf Center Systems Science Engineering. Copyright Johns Hopkins University 2020. Modifications: COVIDcast Epidata API: signals taken directly JHU CSSE COVID-19 GitHub repository without changes. 7-day average signals computed Delphi calculating moving averages preceding 7 days, signal June 7 average underlying data June 1 7, inclusive.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/check_pname.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that newly created variable names don't overlap — check_pname","title":"Check that newly created variable names don't overlap — check_pname","text":"check_pname used slather method ensure newly created variable names overlap existing names. Throws warning check fails, creates random string.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/check_pname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that newly created variable names don't overlap — check_pname","text":"","code":"check_pname(res, preds, object, newname = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/check_pname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that newly created variable names don't overlap — check_pname","text":"res data frame tibble newly created variables. preds epi_df tibble containing predictions. object layer object passed slather(). newname string variable names object contain $name element","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lags and leads of predictors and response — create_lags_and_leads","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"Create lags leads predictors response","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"","code":"create_lags_and_leads(x, y, xy_lags, y_leads, time_value, key_vars = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"x Data frame matrix. Predictor variables. May missing. y Response vector. Typical usage \"lead\" y number steps forward prediction horizon (ahead). xy_lags Vector list. vector, lags apply column x y. list, must length ncol(x)+1 component apply requisite predictor. NULL list element remove variable completely result. Negative values \"lead\" variable. y_leads Scalar vector. scalar, \"lead\" y amount. vector produce multiple columns y useful model. Negative values \"lag\" variable. time_value Vector time values data observed key_vars Factors representing different groups. May NULL (default).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"data.frame.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"","code":"x <- 1:20 y <- -20:-1 time_value <- c(1:18, 20, 21) create_lags_and_leads(x, y, c(1, 2), 1, time_value) #> # A tibble: 24 × 7 #>    keys  time_value    y1    x1    x2    x3    x4 #>    <chr>      <dbl> <int> <int> <int> <int> <int> #>  1 empty          0   -20    NA    NA    NA    NA #>  2 empty          1   -19    NA    NA    NA    NA #>  3 empty          2   -18     1    NA   -20    NA #>  4 empty          3   -17     2     1   -19   -20 #>  5 empty          4   -16     3     2   -18   -19 #>  6 empty          5   -15     4     3   -17   -18 #>  7 empty          6   -14     5     4   -16   -17 #>  8 empty          7   -13     6     5   -15   -16 #>  9 empty          8   -12     7     6   -14   -15 #> 10 empty          9   -11     8     7   -13   -14 #> # … with 14 more rows create_lags_and_leads(x, y, list(c(1, 2), 1), 1, time_value) #> # A tibble: 24 × 6 #>    keys  time_value    y1    x1    x2    x3 #>    <chr>      <dbl> <int> <int> <int> <int> #>  1 empty          0   -20    NA    NA    NA #>  2 empty          1   -19    NA    NA    NA #>  3 empty          2   -18     1    NA   -20 #>  4 empty          3   -17     2     1   -19 #>  5 empty          4   -16     3     2   -18 #>  6 empty          5   -15     4     3   -17 #>  7 empty          6   -14     5     4   -16 #>  8 empty          7   -13     6     5   -15 #>  9 empty          8   -12     7     6   -14 #> 10 empty          9   -11     8     7   -13 #> # … with 14 more rows create_lags_and_leads(x, y, list(c(-1, 1), NULL), 1, time_value) #> # A tibble: 23 × 5 #>    keys  time_value    y1    x1    x2 #>    <chr>      <dbl> <int> <int> <int> #>  1 empty          0   -20     1    NA #>  2 empty          1   -19     2    NA #>  3 empty          2   -18     3     1 #>  4 empty          3   -17     4     2 #>  5 empty          4   -16     5     3 #>  6 empty          5   -15     6     4 #>  7 empty          6   -14     7     5 #>  8 empty          7   -13     8     6 #>  9 empty          8   -12     9     7 #> 10 empty          9   -11    10     8 #> # … with 13 more rows create_lags_and_leads(x, y, c(1, 2), c(0, 1), time_value) #> # A tibble: 24 × 8 #>    keys  time_value    y1    y2    x1    x2    x3    x4 #>    <chr>      <dbl> <int> <int> <int> <int> <int> <int> #>  1 empty          1   -20   -19    NA    NA    NA    NA #>  2 empty          2   -19   -18     1    NA   -20    NA #>  3 empty          3   -18   -17     2     1   -19   -20 #>  4 empty          4   -17   -16     3     2   -18   -19 #>  5 empty          5   -16   -15     4     3   -17   -18 #>  6 empty          6   -15   -14     5     4   -16   -17 #>  7 empty          7   -14   -13     6     5   -15   -16 #>  8 empty          8   -13   -12     7     6   -14   -15 #>  9 empty          9   -12   -11     8     7   -13   -14 #> 10 empty         10   -11   -10     9     8   -12   -13 #> # … with 14 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new layer — create_layer","title":"Create a new layer — create_layer","text":"function creates skeleton new frosting layer. called inside package, create R script R/ directory, fill name layer, open file.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new layer — create_layer","text":"","code":"create_layer(name = NULL, open = rlang::is_interactive())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new layer — create_layer","text":"name Either name without extension, NULL create paired file based currently open file script editor. R file open, use_test() create/open corresponding test file; test file open, use_r() create/open corresponding R file. open Whether open file interactive editing.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new layer — create_layer","text":"","code":"if (FALSE) {    # Note: running this will write `layer_strawberry.R` to   # the `R/` directory of your current project   create_layer(\"strawberry\") }"},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply columns of a data.frame by a matrix — df_mat_mul","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"Multiply columns data.frame matrix","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"","code":"df_mat_mul(dat, mat, out_names = \"out\", ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"dat data.frame mat matrix out_names Character vector. Creates names resulting columns multiplication. scalar, treated prefix remaining columns numbered sequentially. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"data.frame new columns right. Original columns removed.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"","code":"df <- data.frame(matrix(1:200, ncol = 10)) mat <- matrix(1:10, ncol = 2) df_mat_mul(df, mat, \"z\", dplyr::num_range(\"X\", 2:6)) #>    X1  X7  X8  X9 X10   z1   z2 #> 1   1 121 141 161 181 1115 2640 #> 2   2 122 142 162 182 1130 2680 #> 3   3 123 143 163 183 1145 2720 #> 4   4 124 144 164 184 1160 2760 #> 5   5 125 145 165 185 1175 2800 #> 6   6 126 146 166 186 1190 2840 #> 7   7 127 147 167 187 1205 2880 #> 8   8 128 148 168 188 1220 2920 #> 9   9 129 149 169 189 1235 2960 #> 10 10 130 150 170 190 1250 3000 #> 11 11 131 151 171 191 1265 3040 #> 12 12 132 152 172 192 1280 3080 #> 13 13 133 153 173 193 1295 3120 #> 14 14 134 154 174 194 1310 3160 #> 15 15 135 155 175 195 1325 3200 #> 16 16 136 156 176 196 1340 3240 #> 17 17 137 157 177 197 1355 3280 #> 18 18 138 158 178 198 1370 3320 #> 19 19 139 159 179 199 1385 3360 #> 20 20 140 160 180 200 1400 3400"},{"path":"https://cmu-delphi.github.io/epipredict/reference/dist_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"A distribution parameterized by a set of quantiles — dist_quantiles","title":"A distribution parameterized by a set of quantiles — dist_quantiles","text":"distribution parameterized set quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/dist_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A distribution parameterized by a set of quantiles — dist_quantiles","text":"","code":"dist_quantiles(x, tau)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/dist_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A distribution parameterized by a set of quantiles — dist_quantiles","text":"x vector values tau vector probabilities corresponding x","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/dist_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A distribution parameterized by a set of quantiles — dist_quantiles","text":"","code":"dstn <- dist_quantiles(list(1:4, 8:11), list(c(.2,.4,.6,.8))) quantile(dstn, p = c(.1, .25, .5, .9)) #> [[1]] #> [1] 0.124961 1.250000 2.500000 4.875039 #>  #> [[2]] #> [1]  7.124961  8.250000  9.500000 11.875039 #>  median(dstn) #> [1] 2.5 9.5  # it's a bit annoying to inspect the data vctrs::vec_data(vctrs::vec_data(dstn[1])[[1]]) #>   q tau #> 1 1 0.2 #> 2 2 0.4 #> 3 3 0.6 #> 4 4 0.8"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab any keys associated to an epi_df — epi_keys","title":"Grab any keys associated to an epi_df — epi_keys","text":"Grab keys associated epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab any keys associated to an epi_df — epi_keys","text":"","code":"epi_keys(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab any keys associated to an epi_df — epi_keys","text":"x data.frame, tibble, epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab any keys associated to an epi_df — epi_keys","text":"epi_df, returns \"keys\". Otherwise NULL","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a epi_recipe for preprocessing data — epi_recipe","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"recipe description steps applied data set order prepare data analysis. loose wrapper around recipes::recipe() properly handle additional columns present epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"","code":"epi_recipe(x, ...)  # S3 method for default epi_recipe(x, ...)  # S3 method for epi_df epi_recipe(x, formula = NULL, ..., vars = NULL, roles = NULL)  # S3 method for formula epi_recipe(formula, data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"x, data data frame, tibble, epi_df template data set (see ). always coerced first row avoid memory issues ... arguments passed methods (currently used). formula model formula. -line functions used (e.g. log(x), x:y, etc.) minus signs allowed. types transformations enacted using step functions package. Dots allowed simple multivariate outcome terms (.e. need cbind; see Examples). vars character string column names corresponding variables used context (see ) roles character string (length vars) describes single role variable take. value anything common roles \"outcome\", \"predictor\", \"time_value\", \"geo_value\"","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"object class recipe sub-objects: var_info tibble containing information original data set columns term_info tibble contains current set terms data set. initially defaults data contained var_info. steps list step  check objects define sequence preprocessing operations applied data. default value NULL template tibble data. initialized data given data argument can different recipe trained.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"","code":"library(epiprocess) library(dplyr) library(recipes)  jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-08-01\") %>%   dplyr::arrange(geo_value, time_value)  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_naomit(all_predictors()) %>%   # below, `skip` means we don't do this at predict time   step_naomit(all_outcomes(), skip = TRUE)  r #> Recipe #>  #> Inputs: #>  #>        role #variables #>   geo_value          1 #>         raw          2 #>  time_value          1 #>  #> Operations: #>  #> Lagging death_rate by 0, 7, 14 #> Leading death_rate by 7 #> Lagging case_rate by 0, 7, 14 #> Removing rows with NA values in all_predictors() #> Removing rows with NA values in all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"lower-level function. performs error checking.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"","code":"epi_shift(x, shifts, time_value, keys = NULL, out_name = \"x\")"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"x Data frame. Variables shift shifts List. list element vector shifts. Negative values produce leads. list length number columns x. time_value Vector. length x giving time stamps. keys Data frame, vector, NULL. Additional grouping vars. out_name Chr. output list use prefix.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"list tibbles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an epi_workflow — epi_workflow","title":"Create an epi_workflow — epi_workflow","text":"container object unifies preprocessing, fitting, prediction, postprocessing predictive modeling epidemiological data. extends functionality workflows::workflow() handle typical panel data structures found field. extension handled completely internally, invisible user. intents purposes, operates exactly like workflows::workflow(). details numerous examples, see .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an epi_workflow — epi_workflow","text":"","code":"epi_workflow(preprocessor = NULL, spec = NULL, postprocessor = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an epi_workflow — epi_workflow","text":"preprocessor optional preprocessor add workflow. One : formula, passed add_formula(). recipe, passed add_recipe(). workflow_variables() object, passed add_variables(). spec optional parsnip model specification add workflow. Passed add_model(). postprocessor optional postprocessor add workflow. Currently frosting allowed using, add_frosting().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an epi_workflow — epi_workflow","text":"new epi_workflow object.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an epi_workflow — epi_workflow","text":"","code":"library(dplyr) library(parsnip) library(recipes)  jhu <- case_death_rate_subset  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE)  wf <- epi_workflow(r, linear_reg())  wf #> ══ Epi Workflow ════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 5 Recipe Steps #>  #> • step_epi_lag() #> • step_epi_ahead() #> • step_epi_lag() #> • step_naomit() #> • step_naomit() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/extract_argument.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an argument made to a frosting layer or recipe step — extract_argument","title":"Extract an argument made to a frosting layer or recipe step — extract_argument","text":"Extract argument made frosting layer recipe step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extract_argument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an argument made to a frosting layer or recipe step — extract_argument","text":"","code":"extract_argument(x, name, arg, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/extract_argument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an argument made to a frosting layer or recipe step — extract_argument","text":"x epi_workflow, epi_recipe, frosting, step, layer object name name layer arg name argument ... used","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extract_argument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an argument made to a frosting layer or recipe step — extract_argument","text":"object originally passed argument layer step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extract_argument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an argument made to a frosting layer or recipe step — extract_argument","text":"","code":"f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(probs = c(0.0275, 0.975), symmetrize = FALSE) %>%   layer_naomit(.pred)  extract_argument(f, \"layer_residual_quantiles\", \"symmetrize\") #> [1] FALSE"},{"path":"https://cmu-delphi.github.io/epipredict/reference/extrapolate_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","title":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","text":"Summarize distribution set quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extrapolate_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","text":"","code":"extrapolate_quantiles(x, p, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/extrapolate_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","text":"x distribution vector p vector probabilities calculate quantiles ... additional arguments passed quantile method","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extrapolate_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","text":"distribution vector containing dist_quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/extrapolate_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a distribution with a set of quantiles — extrapolate_quantiles","text":"","code":"library(distributional) dstn <- dist_normal(c(10, 2), c(5, 10)) extrapolate_quantiles(dstn, p = c(.25, 0.5, .75)) #> <distribution[2]> #> [1] [0.25, 0.75]<q-rng> [0.25, 0.75]<q-rng>  dstn <- dist_quantiles(list(1:4, 8:11), list(c(.2,.4,.6,.8))) # because this distribution is already quantiles, any extra quantiles are # appended extrapolate_quantiles(dstn, p = c(.25, 0.5, .75)) #> <distribution[2]> #> [1] [0.2, 0.8]<q-rng> [0.2, 0.8]<q-rng>  dstn <- c(dist_normal(c(10, 2), c(5, 10)),   dist_quantiles(list(1:4, 8:11), list(c(.2,.4,.6,.8)))) extrapolate_quantiles(dstn, p = c(.25, 0.5, .75)) #> <distribution[4]> #> [1] [0.25, 0.75]<q-rng> [0.25, 0.75]<q-rng> [0.2, 0.8]<q-rng>   #> [4] [0.2, 0.8]<q-rng>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Create frosting for postprocessing predictions — frosting","title":"Create frosting for postprocessing predictions — frosting","text":"generates postprocessing container (much like recipes::recipe()) hold steps postprocessing predictions.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create frosting for postprocessing predictions — frosting","text":"","code":"frosting(layers = NULL, requirements = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create frosting for postprocessing predictions — frosting","text":"layers Must NULL. requirements Must NULL.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create frosting for postprocessing predictions — frosting","text":"frosting object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create frosting for postprocessing predictions — frosting","text":"arguments currently placeholders must NULL","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create frosting for postprocessing predictions — frosting","text":"","code":"library(dplyr) library(recipes)  # Toy example to show that frosting can be created and added for postprocessing  f <- frosting()  wf <- epi_workflow() %>% add_frosting(f)  # A more realistic example jhu <- case_death_rate_subset %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE)  wf <- epi_workflow(r, parsnip::linear_reg()) %>% parsnip::fit(jhu) latest <- get_test_data(recipe = r, x = jhu)  f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred)  wf1 <- wf %>% add_frosting(f)  p <- predict(wf1, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 3 #>   geo_value time_value .pred #> * <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.313 #> 3 ny        2021-12-31 0.295"},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the precision of a number — get_precision","title":"Determine the precision of a number — get_precision","text":"Determine precision number, number digits past decimal point.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the precision of a number — get_precision","text":"","code":"get_precision(x, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the precision of a number — get_precision","text":"x numeric vector ... Ignore ","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the precision of a number — get_precision","text":"vector integers, number digits (last non-zero digit) past decimal point.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the precision of a number — get_precision","text":"number expressed scientific notation, take number digits","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get test data for prediction based on longest lag period — get_test_data","title":"Get test data for prediction based on longest lag period — get_test_data","text":"Based longest lag period recipe, get_test_data() creates tibble epiprocess::epi_df format columns geo_value, time_value variables original dataset, used create test data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get test data for prediction based on longest lag period — get_test_data","text":"","code":"get_test_data(recipe, x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get test data for prediction based on longest lag period — get_test_data","text":"recipe recipe object. step added sequence operations recipe. x data frame, tibble, epi_df data set.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get test data for prediction based on longest lag period — get_test_data","text":"tibble columns geo_value, time_value variables original dataset.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get test data for prediction based on longest lag period — get_test_data","text":"","code":"# create recipe  rec <- epi_recipe(case_death_rate_subset) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14))  get_test_data(recipe = rec, x = case_death_rate_subset) #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 840 × 4 #>    geo_value time_value case_rate death_rate #>  * <chr>     <date>         <dbl>      <dbl> #>  1 ak        2021-12-17      23.1      1.19  #>  2 ak        2021-12-18      23.1      1.19  #>  3 ak        2021-12-19      23.1      1.19  #>  4 ak        2021-12-20      23.2      1.17  #>  5 ak        2021-12-21      23.2      1.17  #>  6 ak        2021-12-22      20.3      1.72  #>  7 ak        2021-12-23      20.3      1.72  #>  8 ak        2021-12-24      12.6      0.593 #>  9 ak        2021-12-25      12.6      0.593 #> 10 ak        2021-12-26      12.6      0.593 #> # … with 830 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names from a data frame via tidy select — grab_names","title":"Get the names from a data frame via tidy select — grab_names","text":"Given data.frame, use <tidy-select> syntax choose variables. Return names variables","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names from a data frame via tidy select — grab_names","text":"","code":"grab_names(dat, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names from a data frame via tidy select — grab_names","text":"dat data.frame ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names from a data frame via tidy select — grab_names","text":"character vector","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the names from a data frame via tidy select — grab_names","text":"internal function, checks performed.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names from a data frame via tidy select — grab_names","text":"","code":"df <- data.frame(a = 1, b = 2, cc = rep(NA, 3)) grab_names(df, dplyr::starts_with(\"c\")) #> [1] \"cc\""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for epi_recipe — is_epi_recipe","title":"Test for epi_recipe — is_epi_recipe","text":"Test epi_recipe","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for epi_recipe — is_epi_recipe","text":"","code":"is_epi_recipe(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for epi_recipe — is_epi_recipe","text":"x object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for epi_recipe — is_epi_recipe","text":"TRUE object inherits epi_recipe.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for an epi_workflow — is_epi_workflow","title":"Test for an epi_workflow — is_epi_workflow","text":"Test epi_workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for an epi_workflow — is_epi_workflow","text":"","code":"is_epi_workflow(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for an epi_workflow — is_epi_workflow","text":"x object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/is_epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for an epi_workflow — is_epi_workflow","text":"TRUE object inherits epi_workflow.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"Constructs list arguments knn_iteraive_ar_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"","code":"knn_iteraive_ar_args_list(   lags = c(0, 7, 14),   query_window_len = 50,   topK = 500,   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE,   update_model = TRUE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. query_window_len Integer. Length query window KNN searching. topK Integer. Number similar training samples. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented update_model Logical. default TRUE updates one-step ahead model every time iterative forecasting strategy.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"","code":"arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"KNN enhanced iterative AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"","code":"knn_iteraive_ar_forecaster(   x,   y,   key_vars,   time_value,   args = knn_iteraive_ar_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"x Unused covariates. Must missing (resulting AR y) . y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling knn_iteraive_ar_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"data frame point (optionally interval) forecasts multiple aheads (multiple horizons one specified ahead) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"Constructs list arguments knnarx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"","code":"knnarx_args_list(   lags = c(0, 7, 14),   query_window_len = 50,   topK = 500,   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. query_window_len Integer. Length query window KNN searching. topK Integer. Number similar training samples. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"","code":"knnarx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  knnarx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  knnarx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"KNN enhanced ARX forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"","code":"knnarx_forecaster(x, y, key_vars, time_value, args = knnarx_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling knnarx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"data frame point (optionally interval) forecasts single ahead (unique horizon) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer-processors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract, validate, or detect layers of frosting — extract_layers","title":"Extract, validate, or detect layers of frosting — extract_layers","text":"functions mainly internal. can access validate different layers frosting.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer-processors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract, validate, or detect layers of frosting — extract_layers","text":"","code":"extract_layers(x, ...)  # S3 method for frosting extract_layers(x, ...)  # S3 method for workflow extract_layers(x, ...)  is_layer(x)  validate_layer(x, ..., arg = \"`x`\", call = caller_env())  detect_layer(x, name, ...)  # S3 method for frosting detect_layer(x, name, ...)  # S3 method for workflow detect_layer(x, name, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer-processors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract, validate, or detect layers of frosting — extract_layers","text":"x epi_workflow, frosting, layer object ... additional arguments possible future methods arg name input (error reporting) call environment (error reporting) name layer name detect","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer-processors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract, validate, or detect layers of frosting — extract_layers","text":"logical validators/detectors list layers extractors","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer-processors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract, validate, or detect layers of frosting — extract_layers","text":"","code":"f <- frosting() %>% layer_predict() wf <- epi_workflow(postprocessor = f)  is_layer(layer(\"what_the_what\")) #> [1] TRUE detect_layer(f, \"layer_predict\") #> [1] TRUE detect_layer(wf, \"layer_predict\") #> [1] TRUE  extract_layers(f) #> [[1]] #> $type #> NULL #>  #> $opts #> list() #>  #> $dots_list #> list() #>  #> $id #> [1] \"predict_default_slAy5\" #>  #> attr(,\"class\") #> [1] \"layer_predict\" \"layer\"         #>  extract_layers(wf) #> [[1]] #> $type #> NULL #>  #> $opts #> list() #>  #> $dots_list #> list() #>  #> $id #> [1] \"predict_default_slAy5\" #>  #> attr(,\"class\") #> [1] \"layer_predict\" \"layer\"         #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer.html","id":null,"dir":"Reference","previous_headings":"","what":"layer sets the class of the layer — layer","title":"layer sets the class of the layer — layer","text":"layer sets class layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"layer sets the class of the layer — layer","text":"","code":"layer(subclass, ..., .prefix = \"layer_\")"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"layer sets the class of the layer — layer","text":"subclass character string resulting class. example, subclass = \"blah\" layer object returned class layer_blah. ... arguments operator returned. .prefix Prefix subclass created.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"layer sets the class of the layer — layer","text":"updated layer new class","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessing step to add the forecast date — layer_add_forecast_date","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"Postprocessing step add forecast date","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"","code":"layer_add_forecast_date(   frosting,   forecast_date = NULL,   id = rand_id(\"add_forecast_date\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"frosting frosting postprocessor forecast_date forecast date add column epi_df. cases, specified form \"yyyy-mm-dd\". Note forecast date left unspecified, set maximum time value test data processing (ex. leads lags) applied. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"use function, either specify forecast date leave forecast date unspecifed . latter case, forecast date set maximum time value processed test data. case, forecast date less recent update date data (ie. as_of value), appropriate warning thrown.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_forecast_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Postprocessing step to add the forecast date — layer_add_forecast_date","text":"","code":"jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   recipes::step_naomit(recipes::all_predictors()) %>%   recipes::step_naomit(recipes::all_outcomes(), skip = TRUE) wf <- epi_workflow(r, parsnip::linear_reg()) %>% parsnip::fit(jhu) latest <- jhu %>%   dplyr::filter(time_value >= max(time_value) - 14)  # Specify a `forecast_date` that is greater than or equal to `as_of` date f <- frosting() %>% layer_predict() %>%   layer_add_forecast_date(forecast_date = \"2022-05-31\") %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p1 <- predict(wf1, latest) p1 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred forecast_date #> * <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2022-05-31    #> 2 ca        2021-12-31 0.313 2022-05-31    #> 3 ny        2021-12-31 0.295 2022-05-31     # Specify a `forecast_date` that is less than `as_of` date f2 <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date(forecast_date = \"2021-12-31\") %>%   layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- predict(wf2, latest) #> Warning: forecast_date is less than the most recent update date of the data. p2 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred forecast_date #> * <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2021-12-31    #> 2 ca        2021-12-31 0.313 2021-12-31    #> 3 ny        2021-12-31 0.295 2021-12-31     # Do not specify a forecast_date  f3 <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date() %>%   layer_naomit(.pred) wf3 <- wf %>% add_frosting(f3)  p3 <- predict(wf3, latest) #> Warning: forecast_date is less than the most recent update date of the data. p3 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred forecast_date #> * <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2022-01-14    #> 2 ca        2021-12-31 0.313 2022-01-14    #> 3 ny        2021-12-31 0.295 2022-01-14"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessing step to add the target date — layer_add_target_date","title":"Postprocessing step to add the target date — layer_add_target_date","text":"Postprocessing step add target date","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessing step to add the target date — layer_add_target_date","text":"","code":"layer_add_target_date(   frosting,   target_date = NULL,   id = rand_id(\"add_target_date\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessing step to add the target date — layer_add_target_date","text":"frosting frosting postprocessor target_date target date add column epi_df. default, maximum time_value processed test data plus ahead, ahead specified preprocessing (likely step_epi_ahead). user may override date (usually form \"yyyy-mm-dd\"). id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessing step to add the target date — layer_add_target_date","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Postprocessing step to add the target date — layer_add_target_date","text":"default, function assumes value ahead specified preprocessing step (likely step_epi_ahead). , ahead added maximum time_value test data get target date.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_add_target_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Postprocessing step to add the target date — layer_add_target_date","text":"","code":"jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   recipes::step_naomit(recipes::all_predictors()) %>%   recipes::step_naomit(recipes::all_outcomes(), skip = TRUE) wf <- epi_workflow(r, parsnip::linear_reg()) %>% parsnip::fit(jhu) latest <- jhu %>%   dplyr::filter(time_value >= max(time_value) - 14)  # Use ahead from preprocessing f <- frosting() %>% layer_predict() %>%   layer_add_target_date() %>% layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- predict(wf1, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred target_date #> * <chr>     <date>     <dbl> <date>      #> 1 ak        2021-12-31 0.245 2022-01-21  #> 2 ca        2021-12-31 0.313 2022-01-21  #> 3 ny        2021-12-31 0.295 2022-01-21   # Override default behaviour by specifying own target date f2 <- frosting() %>% layer_predict() %>% layer_add_target_date(target_date = \"2022-01-08\") %>% layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- predict(wf2, latest) p2 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred target_date #> * <chr>     <date>     <dbl> <date>      #> 1 ak        2021-12-31 0.245 2022-01-08  #> 2 ca        2021-12-31 0.313 2022-01-08  #> 3 ny        2021-12-31 0.295 2022-01-08"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_naomit.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit NAs from predictions or other columns — layer_naomit","title":"Omit NAs from predictions or other columns — layer_naomit","text":"Omit NAs predictions columns","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_naomit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit NAs from predictions or other columns — layer_naomit","text":"","code":"layer_naomit(frosting, ..., .flag = TRUE, id = rand_id(\"naomit\"))"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_naomit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omit NAs from predictions or other columns — layer_naomit","text":"frosting frosting postprocessor ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. Typical usage .pred remove rows NA predictions. .flag logical determine layer added. Passed add_layer(). Default TRUE. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_naomit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omit NAs from predictions or other columns — layer_naomit","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_naomit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omit NAs from predictions or other columns — layer_naomit","text":"","code":"jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   recipes::step_naomit(recipes::all_predictors()) %>%   recipes::step_naomit(recipes::all_outcomes(), skip = TRUE)  wf <- epi_workflow(r, parsnip::linear_reg()) %>%  parsnip::fit(jhu)  latest <- get_test_data(recipe = r, x = jhu)  f <- epipredict:::frosting() %>%      layer_predict() %>%      layer_naomit(.pred)  wf1 <- wf %>% epipredict:::add_frosting(f)  p <- predict(wf1, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 3 #>   geo_value time_value .pred #> * <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.313 #> 3 ny        2021-12-31 0.295"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction layer for postprocessing — layer_predict","title":"Prediction layer for postprocessing — layer_predict","text":"Implements prediction fitted epi_workflow. One may want different types prediction, potentially apply amount postprocessing. typically first layer frosting postprocessor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction layer for postprocessing — layer_predict","text":"","code":"layer_predict(   frosting,   type = NULL,   opts = list(),   ...,   .flag = TRUE,   id = rand_id(\"predict_default\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction layer for postprocessing — layer_predict","text":"frosting frosting object #' @param .flag logical determine layer added. Passed add_layer(). Default TRUE. type single character value NULL. Possible values \"numeric\", \"class\", \"prob\", \"conf_int\", \"pred_int\", \"quantile\", \"time\", \"hazard\", \"survival\", \"raw\". NULL, predict() choose appropriate value based model's mode. opts list optional arguments underlying predict function used type = \"raw\". list include options model object new data predicted. ... Arguments underlying model's prediction function passed (see opts). parsnip related options can passed, depending value type. Possible arguments : interval: types \"survival\" \"quantile\", interval estimates added, available? Options \"none\" \"confidence\". level: types \"conf_int\", \"pred_int\", \"survival\" parameter tail area intervals (e.g. confidence level confidence intervals). Default value 0.95. std_error: add standard error fit prediction (scale linear predictors) types \"conf_int\" \"pred_int\". Default value FALSE. quantile: quantile(s) quantile regression (implemented yet) time: time(s) hazard survival probability estimates. .flag logical determine layer added. Passed add_layer(). Default TRUE. id string identifying layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction layer for postprocessing — layer_predict","text":"updated frosting object","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction layer for postprocessing — layer_predict","text":"","code":"library(dplyr) library(recipes)  jhu <- case_death_rate_subset %>% filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%  step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%  step_epi_ahead(death_rate, ahead = 7) %>%  step_naomit(all_predictors()) %>%  step_naomit(all_outcomes(), skip = TRUE) wf <- epi_workflow(r, parsnip::linear_reg()) %>% parsnip::fit(jhu) latest <- jhu %>%  filter(time_value >= max(time_value) - 14)  # Predict layer alone f <- frosting() %>% layer_predict() wf1 <- wf %>% add_frosting(f)  p1 <- predict(wf1, latest) p1 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 108 × 3 #>    geo_value time_value .pred #>    <chr>     <date>     <dbl> #>  1 ak        2021-12-10    NA #>  2 ca        2021-12-10    NA #>  3 ny        2021-12-10    NA #>  4 ak        2021-12-11    NA #>  5 ca        2021-12-11    NA #>  6 ny        2021-12-11    NA #>  7 ak        2021-12-12    NA #>  8 ca        2021-12-12    NA #>  9 ny        2021-12-12    NA #> 10 ak        2021-12-13    NA #> # … with 98 more rows  # Prediction with interval f <- frosting() %>% layer_predict(type = \"pred_int\") wf2 <- wf %>% add_frosting(f)  p2 <- predict(wf2, latest) p2 #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 108 × 4 #>    geo_value time_value .pred_lower .pred_upper #>    <chr>     <date>           <dbl>       <dbl> #>  1 ak        2021-12-10          NA          NA #>  2 ca        2021-12-10          NA          NA #>  3 ny        2021-12-10          NA          NA #>  4 ak        2021-12-11          NA          NA #>  5 ca        2021-12-11          NA          NA #>  6 ny        2021-12-11          NA          NA #>  7 ak        2021-12-12          NA          NA #>  8 ca        2021-12-12          NA          NA #>  9 ny        2021-12-12          NA          NA #> 10 ak        2021-12-13          NA          NA #> # … with 98 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predictive_distn.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns predictive distributions — layer_predictive_distn","title":"Returns predictive distributions — layer_predictive_distn","text":"function calculates approximation parametric predictive distribution. Predictive distributions linear models require x* (X'X)^{-1} x* along degrees freedom. function approximates . reasonably accurate models fit using lm new point x* far bulk data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predictive_distn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns predictive distributions — layer_predictive_distn","text":"","code":"layer_predictive_distn(   frosting,   ...,   dist_type = c(\"gaussian\", \"student_t\"),   truncate = c(-Inf, Inf),   name = \".pred_distn\",   .flag = TRUE,   id = rand_id(\"predictive_distn\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predictive_distn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns predictive distributions — layer_predictive_distn","text":"frosting frosting postprocessor ... Unused, include consistency layers. dist_type Gaussian Student's t predictive intervals truncate truncate distribution interval name character. name output column. .flag logical determine layer added. Passed add_layer(). Default TRUE. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predictive_distn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns predictive distributions — layer_predictive_distn","text":"updated frosting postprocessor additional columns residual quantiles added prediction","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_predictive_distn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns predictive distributions — layer_predictive_distn","text":"","code":"jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>%  parsnip::fit(jhu)  latest <- get_test_data(recipe = r, x = jhu)  f <- frosting() %>%   layer_predict() %>%   layer_predictive_distn() %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- predict(wf1, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred    .pred_distn #> * <chr>     <date>     <dbl>         <dist> #> 1 ak        2021-12-31 0.245 N(0.24, 0.093) #> 2 ca        2021-12-31 0.313 N(0.31, 0.093) #> 3 ny        2021-12-31 0.295 N(0.29, 0.093)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_residual_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates predictions based on residual quantiles — layer_residual_quantiles","title":"Creates predictions based on residual quantiles — layer_residual_quantiles","text":"Creates predictions based residual quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_residual_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates predictions based on residual quantiles — layer_residual_quantiles","text":"","code":"layer_residual_quantiles(   frosting,   ...,   probs = c(0.0275, 0.975),   symmetrize = TRUE,   name = \".pred_distn\",   .flag = TRUE,   id = rand_id(\"residual_quantiles\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_residual_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates predictions based on residual quantiles — layer_residual_quantiles","text":"frosting frosting postprocessor ... Unused, include consistency layers. probs numeric vector probabilities values (0,1) referring desired quantile. symmetrize logical. TRUE interval symmetric. name character. name output column. .flag logical determine layer added. Passed add_layer(). Default TRUE. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_residual_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates predictions based on residual quantiles — layer_residual_quantiles","text":"updated frosting postprocessor additional columns residual quantiles added prediction","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_residual_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates predictions based on residual quantiles — layer_residual_quantiles","text":"","code":"jhu <- case_death_rate_subset %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>%  parsnip::fit(jhu)  latest <- get_test_data(recipe = r, x = jhu)  f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(probs = c(0.0275, 0.975), symmetrize = FALSE) %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- predict(wf1, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 3 × 4 #>   geo_value time_value .pred         .pred_distn #> * <chr>     <date>     <dbl>              <dist> #> 1 ak        2021-12-31 0.245 [0.03, 0.98]<q-rng> #> 2 ca        2021-12-31 0.313 [0.03, 0.98]<q-rng> #> 3 ny        2021-12-31 0.295 [0.03, 0.98]<q-rng>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Lower and upper thresholds for predicted values — layer_threshold","title":"Lower and upper thresholds for predicted values — layer_threshold","text":"postprocessing step used set prediction values smaller lower threshold higher upper threshold equal threshold values.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lower and upper thresholds for predicted values — layer_threshold","text":"","code":"layer_threshold(   frosting,   ...,   lower = 0,   upper = Inf,   .flag = TRUE,   id = rand_id(\"threshold\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lower and upper thresholds for predicted values — layer_threshold","text":"frosting frosting postprocessor ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. Typical usage .pred threshold predictions range (say, nonnegative). lower Lower threshold prediction values. , predictions less lower bound set . Default value 0. upper Upper threshold prediction values. , predictions greater upper bound set . Default value Inf. .flag logical determine layer added. Passed add_layer(). Default TRUE. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lower and upper thresholds for predicted values — layer_threshold","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/layer_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lower and upper thresholds for predicted values — layer_threshold","text":"","code":"library(dplyr) library(recipes)  jhu <- case_death_rate_subset %>%   filter(time_value < \"2021-03-08\", geo_value %in% c(\"ak\", \"ca\", \"ar\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE) wf <- epi_workflow(r, parsnip::linear_reg()) %>%   parsnip::fit(jhu)  latest <- jhu %>%   filter(time_value >= max(time_value) - 14)  f <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred, lower = 0.180, upper = 0.310) wf <- wf %>% add_frosting(f) p <- predict(wf, latest) p #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 108 × 3 #>    geo_value time_value .pred #>  * <chr>     <date>     <dbl> #>  1 ak        2021-02-14    NA #>  2 ar        2021-02-14    NA #>  3 ca        2021-02-14    NA #>  4 ak        2021-02-15    NA #>  5 ar        2021-02-15    NA #>  6 ca        2021-02-15    NA #>  7 ak        2021-02-16    NA #>  8 ar        2021-02-16    NA #>  9 ca        2021-02-16    NA #> 10 ak        2021-02-17    NA #> # … with 98 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/nested_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","title":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","text":"Turn vector quantile distributions list-col","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/nested_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","text":"","code":"nested_quantiles(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/nested_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","text":"x distribution containing dist_quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/nested_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","text":"list-col","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/nested_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a a vector of quantile distributions into a list-col — nested_quantiles","text":"","code":"edf <- case_death_rate_subset[1:3,] edf$q <- dist_quantiles(list(1:5, 2:4, 3:10), list(1:5/6, 2:4/5, 3:10/11))  edf_nested <- edf %>% dplyr::mutate(q = nested_quantiles(q)) edf_nested %>% tidyr::unnest(q) #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 16 × 6 #>    geo_value time_value case_rate death_rate     q   tau #>  * <chr>     <date>         <dbl>      <dbl> <dbl> <dbl> #>  1 ak        2020-12-31      35.9      0.158     1 0.167 #>  2 ak        2020-12-31      35.9      0.158     2 0.333 #>  3 ak        2020-12-31      35.9      0.158     3 0.5   #>  4 ak        2020-12-31      35.9      0.158     4 0.667 #>  5 ak        2020-12-31      35.9      0.158     5 0.833 #>  6 al        2020-12-31      65.1      0.438     2 0.4   #>  7 al        2020-12-31      65.1      0.438     3 0.6   #>  8 al        2020-12-31      65.1      0.438     4 0.8   #>  9 ar        2020-12-31      66.0      1.27      3 0.273 #> 10 ar        2020-12-31      66.0      1.27      4 0.364 #> 11 ar        2020-12-31      66.0      1.27      5 0.455 #> 12 ar        2020-12-31      66.0      1.27      6 0.545 #> 13 ar        2020-12-31      66.0      1.27      7 0.636 #> 14 ar        2020-12-31      66.0      1.27      8 0.727 #> 15 ar        2020-12-31      66.0      1.27      9 0.818 #> 16 ar        2020-12-31      66.0      1.27     10 0.909"},{"path":"https://cmu-delphi.github.io/epipredict/reference/new_epi_recipe_blueprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","title":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","text":"Used simplicity. See hardhat::new_recipe_blueprint() hardhat::default_recipe_blueprint() details.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/new_epi_recipe_blueprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","text":"","code":"new_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\",   ptypes = NULL,   recipe = NULL,   ...,   subclass = character() )  epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\" )  default_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\" )  new_default_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\",   ptypes = NULL,   recipe = NULL,   extra_role_ptypes = NULL,   ...,   subclass = character() )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/new_epi_recipe_blueprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","text":"intercept logical. intercept included processed data? information used process function mold forge function list. allow_novel_levels logical. novel factor levels allowed prediction time? information used clean function forge function list, passed scream(). fresh already trained operations re-trained prep() called? composition Either \"tibble\", \"matrix\", \"dgCMatrix\" format processed predictors. \"matrix\" \"dgCMatrix\" chosen, predictors must numeric preprocessing method applied; otherwise error thrown. ptypes Either NULL, named list 2 elements, predictors outcomes, 0-row tibbles. ptypes generated automatically mold() time used validate new_data prediction time. recipe Either NULL, unprepped recipe. argument set automatically mold() time. ... Name-value pairs additional elements blueprints subclass blueprint. subclass character vector. subclasses blueprint. extra_role_ptypes named list. names unique non-standard recipe roles (.e. everything except \"predictors\" \"outcomes\"). values prototypes original columns role. used validation forge().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/new_epi_recipe_blueprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","text":"recipe blueprint.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/new_epi_recipe_blueprint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recipe blueprint that accounts for epi_df panel data — new_epi_recipe_blueprint","text":"bake_dependent_roles automatically set epi_df defaults.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/predict-epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from an epi_workflow — predict-epi_workflow","title":"Predict from an epi_workflow — predict-epi_workflow","text":"predict() method fit epi_workflow object. nice thing predicting epi_workflow : Preprocess new_data using preprocessing method specified workflow created fit. accomplished using hardhat::forge(), apply formula preprocessing call recipes::bake() recipe supplied. Call parsnip::predict.model_fit() using underlying fit parsnip model. Ensure returned object epiprocess::epi_df possible. Specifically, output time_value geo_value columns well prediction.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/predict-epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from an epi_workflow — predict-epi_workflow","text":"","code":"# S3 method for epi_workflow predict(object, new_data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/predict-epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from an epi_workflow — predict-epi_workflow","text":"object epi_workflow fit workflows::fit.workflow() new_data data frame containing new predictors preprocess predict ... Arguments underlying model's prediction function passed (see opts). parsnip related options can passed, depending value type. Possible arguments : interval: types \"survival\" \"quantile\", interval estimates added, available? Options \"none\" \"confidence\". level: types \"conf_int\", \"pred_int\", \"survival\" parameter tail area intervals (e.g. confidence level confidence intervals). Default value 0.95. std_error: add standard error fit prediction (scale linear predictors) types \"conf_int\" \"pred_int\". Default value FALSE. quantile: quantile(s) quantile regression (implemented yet) time: time(s) hazard survival probability estimates.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/predict-epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from an epi_workflow — predict-epi_workflow","text":"data frame model predictions, many rows new_data . new_data epi_df data frame time_value geo_value columns, result well.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/predict-epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from an epi_workflow — predict-epi_workflow","text":"","code":"library(dplyr) library(parsnip) library(recipes)  jhu <- case_death_rate_subset  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE)  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  latest <- jhu %>% filter(time_value >= max(time_value) - 14)  preds <- predict(wf, latest) %>%   filter(!is.na(.pred))  preds #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-31 19:08:25 #>  #> # A tibble: 56 × 3 #>    geo_value time_value     .pred #>  * <chr>     <date>         <dbl> #>  1 ak        2021-12-31  0.378    #>  2 al        2021-12-31  0.280    #>  3 ar        2021-12-31  0.452    #>  4 as        2021-12-31 -0.000475 #>  5 az        2021-12-31  0.657    #>  6 ca        2021-12-31  0.293    #>  7 co        2021-12-31  0.569    #>  8 ct        2021-12-31  0.641    #>  9 dc        2021-12-31  1.02     #> 10 de        2021-12-31  0.733    #> # … with 46 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/slather.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread a layer of frosting on a fitted workflow — slather","title":"Spread a layer of frosting on a fitted workflow — slather","text":"Slathering frosting means implement postprocessing layer. creating new postprocessing layer, must implement S3 method function","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/slather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread a layer of frosting on a fitted workflow — slather","text":"","code":"slather(object, components, the_fit, the_recipe, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/slather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread a layer of frosting on a fitted workflow — slather","text":"object workflow frosting postprocessing steps components list components containing model information. updated returned layer. mold - output calling hardhat::mold() workflow. contains information preprocessing, including recipe. forged - output calling hardhat::forge() workflow. predictors outcomes new_data. three components predictors, outcomes (new_data), extras (usually rest data, including keys). keys - put keys (time_value, geo_value, others) ease. the_fit fitted model object returned calling parsnip::fit() the_recipe epi_recipe preprocessor ... additional arguments used methods. Currently unused.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/slather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread a layer of frosting on a fitted workflow — slather","text":"components list. format applying updates.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"Constructs list arguments smooth_arx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"","code":"smooth_arx_args_list(   lags = c(0, 7, 14),   ahead = 1:28,   degree = 4,   kronecker_version = FALSE,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. ahead Integer. Number time steps ahead forecast date forecasts produced. degree Integer. Order orthodonal polynomials use smoothing. strictly less length(ahead). kronecker_version Logical. ensure \"seen\" latest ahead value. default FALSE computationally simpler uses less recent data. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"","code":"smooth_arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 20 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  smooth_arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 20 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  smooth_arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 120 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"Smooth AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"","code":"smooth_arx_forecaster(   x,   y,   key_vars,   time_value,   args = smooth_arx_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling smooth_arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"data frame point (optionally interval) forecasts across multiple aheads unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_naomit.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified NA omission wrapper function for recipes — step_epi_naomit","title":"Unified NA omission wrapper function for recipes — step_epi_naomit","text":"Unified NA omission wrapper function recipes","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_naomit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified NA omission wrapper function for recipes — step_epi_naomit","text":"","code":"step_epi_naomit(recipe)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_naomit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified NA omission wrapper function for recipes — step_epi_naomit","text":"recipe Recipe used omission steps","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_naomit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified NA omission wrapper function for recipes — step_epi_naomit","text":"Omits NA's predictors outcomes training time fit model. Also omits associated predictors outcomes prediction time due lack response avoidance data loss.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_naomit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified NA omission wrapper function for recipes — step_epi_naomit","text":"","code":"case_death_rate_subset %>%  epi_recipe() %>%  step_epi_naomit() #> Recipe #>  #> Inputs: #>  #>        role #variables #>   geo_value          1 #>         raw          2 #>  time_value          1 #>  #> Operations: #>  #> Removing rows with NA values in all_predictors() #> Removing rows with NA values in all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a shifted predictor — step_epi_lag","title":"Create a shifted predictor — step_epi_lag","text":"step_epi_lag step_epi_ahead create specification recipe step add new columns shifted data. former created lag column, latter create lead column. Shifted data default include NA values shift induced. can properly removed step_epi_naomit(), may specify alternative filler value default argument.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a shifted predictor — step_epi_lag","text":"","code":"step_epi_lag(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   lag = 1,   prefix = \"lag_\",   default = NA,   columns = NULL,   skip = FALSE,   id = rand_id(\"epi_lag\") )  step_epi_ahead(   recipe,   ...,   role = \"outcome\",   trained = FALSE,   ahead = 1,   prefix = \"ahead_\",   default = NA,   columns = NULL,   skip = FALSE,   id = rand_id(\"epi_ahead\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a shifted predictor — step_epi_lag","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? lag default predictor ahead outcome. trained logical indicate quantities preprocessing estimated. lag, ahead vector integers. specified column lag lead value vector. Lag integers must nonnegative, ahead integers must positive. prefix prefix indicate type variable default Determines fills empty rows left leading/lagging (defaults NA). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a shifted predictor — step_epi_lag","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a shifted predictor — step_epi_lag","text":"step assumes data already proper sequential order shifting. prefix id arguments unchangeable ensure code runs properly avoid inconsistency naming. step_epi_ahead, always set \"ahead_\" \"epi_ahead\" respectively, step_epi_lag, set \"lag_\" \"epi_lag, respectively.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a shifted predictor — step_epi_lag","text":"","code":"r <- epi_recipe(case_death_rate_subset) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(death_rate, lag = c(0,7,14)) r #> Recipe #>  #> Inputs: #>  #>        role #variables #>   geo_value          1 #>         raw          2 #>  time_value          1 #>  #> Operations: #>  #> Leading death_rate by 7 #> Lagging death_rate by 0, 7, 14"},{"path":"https://cmu-delphi.github.io/epipredict/news/index.html","id":"epipredict-0009000","dir":"Changelog","previous_headings":"","what":"epipredict 0.0.0.9000","title":"epipredict 0.0.0.9000","text":"Publish public easy navigation Two simple forecasters test beds Working vignette","code":""}]
